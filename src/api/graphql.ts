import { print } from "graphql";
import { GraphQLClient } from "graphql-request";
import gql from "graphql-tag";
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** 日付型(YYYY-MM-DD) */
  Datetime: string;
};

/** 応募者 */
export type Applicant = {
  /** コメント */
  readonly comment?: Maybe<Scalars["String"]>;
  /** 企業・団体名 */
  readonly company: Scalars["String"];
  /** 契約 */
  readonly contracts?: Maybe<ReadonlyArray<Contract>>;
  /** メールアドレス */
  readonly email: Scalars["String"];
  /** ホームページ */
  readonly homepage?: Maybe<Scalars["String"]>;
  readonly id: Scalars["ID"];
  /** 契約したかどうか */
  readonly isContracted: Scalars["Boolean"];
  /** 最新の契約 */
  readonly lastContract?: Maybe<Contract>;
  /** 担当者名 */
  readonly name: Scalars["String"];
  /** 電話番号 */
  readonly phone: Scalars["String"];
  /** プラン */
  readonly plan: Plan;
  /** プランID */
  readonly planId: Scalars["ID"];
  /** 登録日 */
  readonly registeredAt: Scalars["Datetime"];
  /** 購入希望口数 */
  readonly reserveCount: Scalars["Int"];
};

/** 応募者入力オブジェクト */
export type ApplicantInput = {
  /** 企業・団体名 */
  readonly company: Scalars["String"];
  /** 担当者名 */
  readonly name: Scalars["String"];
  /** メールアドレス */
  readonly email: Scalars["String"];
  /** 電話番号 */
  readonly phone: Scalars["String"];
  /** ホームページ */
  readonly homepage?: Maybe<Scalars["String"]>;
  /** 購入希望口数 */
  readonly reserveCount: Scalars["Int"];
  /** コメント */
  readonly comment?: Maybe<Scalars["String"]>;
  /** 契約したかどうか */
  readonly isContracted: Scalars["Boolean"];
  /** プランID */
  readonly planId: Scalars["ID"];
};

/** Autogenerated input type of CancelContract */
export type CancelContractInput = {
  readonly id: Scalars["ID"];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CancelContract */
export type CancelContractPayload = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
  readonly contract?: Maybe<Contract>;
  readonly errors: ReadonlyArray<Scalars["String"]>;
};

/** 契約 */
export type Contract = {
  /** 実際の購入数 */
  readonly actualCount: Scalars["Int"];
  /** 応募者ID */
  readonly applicantId: Scalars["ID"];
  /** 契約日 */
  readonly contractedAt: Scalars["Datetime"];
  readonly id: Scalars["ID"];
  /** キャンセルしたかどうか */
  readonly isCanceled: Scalars["Boolean"];
  /** 在庫ID */
  readonly stockId: Scalars["ID"];
};

/** 契約入力オブジェクト */
export type ContractInput = {
  /** 契約日 */
  readonly contractedAt: Scalars["Datetime"];
  /** 実際の購入数 */
  readonly actualCount: Scalars["Int"];
  /** 応募者ID */
  readonly applicantId: Scalars["ID"];
};

/** Autogenerated input type of CreateApplicant */
export type CreateApplicantInput = {
  readonly attributes: ApplicantInput;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateApplicant */
export type CreateApplicantPayload = {
  readonly applicant?: Maybe<Applicant>;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
  readonly errors: ReadonlyArray<Scalars["String"]>;
};

/** Autogenerated input type of CreateContract */
export type CreateContractInput = {
  readonly attributes: ContractInput;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateContract */
export type CreateContractPayload = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
  readonly contract?: Maybe<Contract>;
  readonly errors: ReadonlyArray<Scalars["String"]>;
};

/** Autogenerated input type of CreateStock */
export type CreateStockInput = {
  readonly attributes: StockInput;
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of CreateStock */
export type CreateStockPayload = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
  readonly errors: ReadonlyArray<Scalars["String"]>;
  readonly stock?: Maybe<Stock>;
};

export type Mutation = {
  /** 契約キャンセル */
  readonly cancelContract?: Maybe<CancelContractPayload>;
  /** 応募者作成 */
  readonly createApplicant?: Maybe<CreateApplicantPayload>;
  /** 契約作成 */
  readonly createContract?: Maybe<CreateContractPayload>;
  /** 在庫作成 */
  readonly createStock?: Maybe<CreateStockPayload>;
  /** ユーザーサインイン */
  readonly signInUser?: Maybe<SignInUserPayload>;
  /** ユーザーサインアウト */
  readonly signOutUser?: Maybe<SignOutUserPayload>;
  /** 応募者更新 */
  readonly updateApplicant?: Maybe<UpdateApplicantPayload>;
};

export type MutationCancelContractArgs = {
  input: CancelContractInput;
};

export type MutationCreateApplicantArgs = {
  input: CreateApplicantInput;
};

export type MutationCreateContractArgs = {
  input: CreateContractInput;
};

export type MutationCreateStockArgs = {
  input: CreateStockInput;
};

export type MutationSignInUserArgs = {
  input: SignInUserInput;
};

export type MutationSignOutUserArgs = {
  input: SignOutUserInput;
};

export type MutationUpdateApplicantArgs = {
  input: UpdateApplicantInput;
};

/** プラン */
export type Plan = {
  /** ID */
  readonly id: Scalars["ID"];
  /** プラン名 */
  readonly name: Scalars["String"];
};

export type Query = {
  /** 応募数 */
  readonly applicantCount: Scalars["Int"];
  /** 応募者一覧 */
  readonly getApplicantList?: Maybe<ReadonlyArray<Applicant>>;
  /** プラン一覧 */
  readonly getPlanList: ReadonlyArray<Plan>;
  /** 最新の在庫情報 */
  readonly lastStock?: Maybe<Stock>;
};

/** Autogenerated input type of SignInUser */
export type SignInUserInput = {
  readonly email: Scalars["String"];
  readonly password: Scalars["String"];
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of SignInUser */
export type SignInUserPayload = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
  readonly errors: ReadonlyArray<Scalars["String"]>;
  readonly user?: Maybe<User>;
};

/** Autogenerated input type of SignOutUser */
export type SignOutUserInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of SignOutUser */
export type SignOutUserPayload = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
  readonly errors: ReadonlyArray<Scalars["String"]>;
  readonly isLogout: Scalars["Boolean"];
};

/** 在庫 */
export type Stock = {
  /** 現在の個数 */
  readonly currentCount: Scalars["Int"];
  readonly id: Scalars["ID"];
  /** 上限数 */
  readonly limit: Scalars["Int"];
  /** 登録日 */
  readonly registeredAt: Scalars["Datetime"];
};

/** 在庫入力オブジェクト */
export type StockInput = {
  /** 上限数 */
  readonly limit: Scalars["Int"];
  /** 現在の個数 */
  readonly currentCount: Scalars["Int"];
  /** 登録日 */
  readonly registeredAt: Scalars["Datetime"];
};

/** Autogenerated input type of UpdateApplicant */
export type UpdateApplicantInput = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
};

/** Autogenerated return type of UpdateApplicant */
export type UpdateApplicantPayload = {
  /** A unique identifier for the client performing the mutation. */
  readonly clientMutationId?: Maybe<Scalars["String"]>;
};

/** ユーザー */
export type User = {
  /** メールアドレス */
  readonly email: Scalars["String"];
  readonly id: Scalars["ID"];
  /** トークン */
  readonly token: Scalars["String"];
};

export type SignInUserMutationVariables = Exact<{
  email: Scalars["String"];
  password: Scalars["String"];
}>;

export type SignInUserMutation = {
  readonly signInUser?: Maybe<
    Pick<SignInUserPayload, "errors"> & {
      readonly user?: Maybe<Pick<User, "token">>;
    }
  >;
};

export type GetFormQueryVariables = Exact<{ [key: string]: never }>;

export type GetFormQuery = Pick<Query, "applicantCount"> & {
  readonly getPlanList: ReadonlyArray<Pick<Plan, "id" | "name">>;
  readonly lastStock?: Maybe<Pick<Stock, "currentCount" | "limit">>;
};

export const SignInUserDocument = gql`
  mutation signInUser($email: String!, $password: String!) {
    signInUser(input: { email: $email, password: $password }) {
      errors
      user {
        token
      }
    }
  }
`;
export const GetFormDocument = gql`
  query getForm {
    getPlanList {
      id
      name
    }
    lastStock {
      currentCount
      limit
    }
    applicantCount
  }
`;

export type SdkFunctionWrapper = <T>(action: () => Promise<T>) => Promise<T>;

const defaultWrapper: SdkFunctionWrapper = (sdkFunction) => sdkFunction();
export function getSdk(
  client: GraphQLClient,
  withWrapper: SdkFunctionWrapper = defaultWrapper
) {
  return {
    signInUser(
      variables: SignInUserMutationVariables
    ): Promise<SignInUserMutation> {
      return withWrapper(() =>
        client.request<SignInUserMutation>(print(SignInUserDocument), variables)
      );
    },
    getForm(variables?: GetFormQueryVariables): Promise<GetFormQuery> {
      return withWrapper(() =>
        client.request<GetFormQuery>(print(GetFormDocument), variables)
      );
    },
  };
}
export type Sdk = ReturnType<typeof getSdk>;
